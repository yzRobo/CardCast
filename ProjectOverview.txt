CardCast Project - Complete Context TransferProject Overview
CardCast is a streaming overlay tool for Trading Card Game (TCG) content creators. It displays card images and details in real-time through OBS browser sources, with all data stored locally for offline use. The tool is designed to create professional, tournament-quality overlays similar to official Pokemon World Championships streams.Original Vision & Requirements

Core Functionality: Search TCG cards quickly, display them in OBS overlays with smooth animations
Local-First Design: Download all card data and images locally so streamers can use it offline (no internet required during streams)
Multi-TCG Support: Pokemon, Magic: The Gathering, Yu-Gi-Oh!, Disney Lorcana, One Piece, Digimon, Flesh and Blood, Star Wars Unlimited
Data Source: Scrape from TCGCSV.com API including card images, text, and all attributes
Distribution: Windows executable (.exe) that users can download and run without Node.js
Inspiration: Based on seeing Pokemon World Championships overlay with cards displayed for both players
Technical Stack Chosen

Backend: Node.js with Express server
Database: SQLite (better-sqlite3) for local storage
Real-time: Socket.io for WebSocket communication
Data Fetching: Axios + Cheerio for scraping
Build Tool: pkg for creating Windows executable
Frontend: Vanilla JavaScript with modern CSS (glassmorphism, dark theme)
License: GPL-3.0 (ensures it stays open source)
Current Project Structure
C:\Projects\CardCast\
├── server.js                 # Main server file
├── index.html               # Main web interface
├── package.json             # Dependencies and scripts
├── config.json              # User configuration
├── scripts/
│   └── build-exe.js         # Windows executable builder
├── src/
│   ├── database.js          # SQLite database handler
│   ├── tcg-api.js          # TCGCSV API integration
│   └── overlay-server.js   # WebSocket server for OBS
├── public/
│   ├── css/
│   │   └── style.css       # Main interface styling
│   └── js/
│       └── main.js         # Client-side JavaScript
├── overlays/
│   ├── main.html           # Main card display (both players)
│   ├── prizes.html         # Prize cards tracker
│   └── decklist.html       # Deck list display
├── data/                   # SQLite databases (created on use)
└── cache/                  # Cached card imagesWhat's Been ImplementedCompleted Files:

server.js: Express server with routes for search, config, game management
src/database.js: Complete SQLite integration with search optimization
src/tcg-api.js: TCGCSV scraping logic (needs completion)
src/overlay-server.js: WebSocket communication (needs creation)
index.html: Full web interface with game selection, search, and controls
public/css/style.css: Complete dark theme with glassmorphic effects
public/js/main.js: Client-side logic for search and display
overlays/main.html: Dual card display with VS indicator
overlays/prizes.html: Pokemon-style prize card tracker
overlays/decklist.html: Deck list viewer
scripts/build-exe.js: Windows executable builder
Design Decisions Made:

Port: 3888 for main server, 3889 for prizes, 3890 for decklist
Theme: Dark mode with purple/cyan accents, glassmorphic panels
Search: Fuzzy search with "starts with" prioritization
Database Schema: Single cards table with game field, indexed for performance
OBS Integration: Three separate browser sources for flexibility
What Still Needs WorkCritical Missing Pieces:

src/tcg-api.js: Needs full implementation for TCGCSV.com scraping
src/overlay-server.js: Needs creation for WebSocket handling
Error Handling: Current errors need to be debugged
TCGCSV Integration: Actual API endpoints and data mapping
Features Not Yet Implemented:

Card image downloading and caching
Download progress tracking
Game-specific card attribute parsing
Deck building and saving
Recent cards tracking
Keyboard shortcuts functionality
Known Issues to Address

Missing module imports causing errors
Need to implement actual TCGCSV API endpoints
Image caching system not implemented
Download functionality not connected
Next Steps Priority:

Fix current errors by creating missing modules
Implement TCGCSV.com API integration
Add image download/caching system
Test with real card data
Build and test Windows executable
Important Context:

User is on Windows (C:\Projects\CardCast)
Wants Windows-only executable (Mac/Linux users must build from source)
Previous experience with similar project (video downloader with yt-dlp)
Emphasis on "it just works" for end users - download exe and run
Must work completely offline after initial data download
Package.json Dependencies:
json{
  "dependencies": {
    "express": "^4.21.2",
    "socket.io": "^4.8.1",
    "better-sqlite3": "^11.10.0",
    "axios": "^1.11.0",
    "cheerio": "^1.1.2"
  },
  "devDependencies": {
    "pkg": "^5.8.1",
    "nodemon": "^3.1.10"
  }
}Testing Instructions:

Run npm run dev to start development server
Browser auto-opens to http://localhost:3888
Test game selection and search
Add OBS browser sources for overlays
Build exe with npm run build
This project aims to be the go-to tool for TCG streamers who want professional overlays without complexity. The focus is on speed, reliability, and beautiful presentation.